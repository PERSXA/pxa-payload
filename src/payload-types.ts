/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    users: User;
    cloth: Cloth;
    clothescollection: Clothescollection;
    media: Media;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {};
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cloth".
 */
export interface Cloth {
  id: string;
  name?: string | null;
  slug?: string | null;
  notes?: string | null;
  hash?: string | null;
  cover_image?: string | Media | null;
  images?:
    | {
        image?: string | Media | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  Title?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clothescollection".
 */
export interface Clothescollection {
  id: string;
  Name?: string | null;
  slug?: string | null;
  Description?: string | null;
  Cover_Image?: string | User | null;
  Images?:
    | {
        Image?: string | User | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}


/// <reference types="node" />
import type { NextFunction, Response } from 'express';
import type { TypeWithID } from 'payload/dist/collections/config/types';
import type { FileData, ImageSize } from 'payload/dist/uploads/types';
import type { CollectionConfig, PayloadRequest } from 'payload/types';
export interface File {
    buffer: Buffer;
    filename: string;
    filesize: number;
    mimeType: string;
    tempFilePath?: string;
}
export type HandleUpload = (args: {
    collection: CollectionConfig;
    req: PayloadRequest;
    data: any;
    file: File;
}) => Promise<void> | void;
export interface TypeWithPrefix {
    prefix?: string;
}
export type HandleDelete = (args: {
    collection: CollectionConfig;
    req: PayloadRequest;
    doc: TypeWithID & FileData & TypeWithPrefix;
    filename: string;
}) => Promise<void> | void;
export type GenerateURL = (args: {
    filename: string;
    collection: CollectionConfig;
    prefix?: string;
}) => string | Promise<string>;
export type StaticHandler = (req: PayloadRequest, res: Response, next: NextFunction) => Promise<unknown> | unknown;
export interface GeneratedAdapter {
    handleUpload: HandleUpload;
    handleDelete: HandleDelete;
    generateURL: GenerateURL;
    staticHandler: StaticHandler;
    onInit?: () => void;
}
export type Adapter = (args: {
    collection: CollectionConfig;
    prefix?: string;
}) => GeneratedAdapter;
export type GenerateFileURL = (args: {
    collection: CollectionConfig;
    filename: string;
    prefix?: string;
    size?: ImageSize;
}) => Promise<string> | string;
export interface CollectionOptions {
    disableLocalStorage?: boolean;
    disablePayloadAccessControl?: true;
    generateFileURL?: GenerateFileURL;
    prefix?: string;
    adapter: Adapter | null;
}
export interface PluginOptions {
    /**
     * Whether or not to enable the plugin
     *
     * Default: true
     */
    enabled?: boolean;
    collections: Record<string, CollectionOptions>;
}
